<?xml version="1.0"?>
<launch>

  <arg name="world_name" default="$(find rl_gcg)/world/empty_corridor.world"/>
  <param name="world_name" value="$(arg world_name)"/>
  <arg name="gui" default="true"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched-->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!--use line for spawning world from .dae mesh in gz model folder-->
    <arg name="world_name" value="$(arg world_name)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="headless" default="true"/>
  </include>
    
  <!-- Spawn simulated drone -->
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="Yspawned" default="0.0"/>
  <include file="$(find hector_quadrotor_gazebo)/launch/spawn_quadrotor.launch">
    <arg name="x" value="$(arg x)"/>
    <arg name="y" value="$(arg y)"/>
    <arg name="Y" default="$(arg Yspawned)"/>
  </include>

  <!-- Simulate the behaviour of the drone -->
  <node name="behaviour_drone_ca" pkg="rl_gcg" type="behaviour_drone_ca.py" output="screen"/>

  <!-- Evaluate whether the target is in sight of the drone or not -->
  <node name="evaluate_drone_ca" pkg="rl_gcg" type="evaluate_drone_ca.py" output="screen"/>

  <!-- Transform the image to a numpy array (needed for communication with GCG) -->
  <node name="image_to_np_drone_ca" pkg="rl_gcg" type="image_to_np_drone_ca.py" output="screen"/>

  <!-- Transform the orientation of the drone into a ypr representation (needed for communication with GCG) -->
  <node name="orientation_to_ypr_drone_ca" pkg="rl_gcg" type="orientation_to_ypr_drone_ca.py" output="screen"/>

</launch>
